/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    companies: Company;
    employees: Employee;
    candidates: Candidate;
    'payroll-requests': PayrollRequest;
    payslips: Payslip;
    'audit-log': AuditLog;
    tickets: Ticket;
    'ticket-messages': TicketMessage;
    notifications: Notification;
    'notification-recipients': NotificationRecipient;
    'contact-us': ContactUs;
    exports: Export;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    tickets: {
      messages: 'ticket-messages';
    };
  };
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    companies: CompaniesSelect<false> | CompaniesSelect<true>;
    employees: EmployeesSelect<false> | EmployeesSelect<true>;
    candidates: CandidatesSelect<false> | CandidatesSelect<true>;
    'payroll-requests': PayrollRequestsSelect<false> | PayrollRequestsSelect<true>;
    payslips: PayslipsSelect<false> | PayslipsSelect<true>;
    'audit-log': AuditLogSelect<false> | AuditLogSelect<true>;
    tickets: TicketsSelect<false> | TicketsSelect<true>;
    'ticket-messages': TicketMessagesSelect<false> | TicketMessagesSelect<true>;
    notifications: NotificationsSelect<false> | NotificationsSelect<true>;
    'notification-recipients': NotificationRecipientsSelect<false> | NotificationRecipientsSelect<true>;
    'contact-us': ContactUsSelect<false> | ContactUsSelect<true>;
    exports: ExportsSelect<false> | ExportsSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: 'en' | 'ar';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      createCollectionExport: TaskCreateCollectionExport;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  role: 'super admin' | 'employer';
  /**
   * The company this user belongs to
   */
  company?: (string | null) | Company;
  firstName?: string | null;
  lastName?: string | null;
  createdBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  lastModifiedBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "companies".
 */
export interface Company {
  id: string;
  /**
   * Official registered company name
   */
  companyLegalName: string;
  region:
    | 'riyadh'
    | 'jeddah'
    | 'dammam_khobar'
    | 'medina'
    | 'makkah'
    | 'abha'
    | 'hail'
    | 'tabuk'
    | 'jazan'
    | 'other_saudi';
  industry:
    | 'ict_software'
    | 'industrial_manufacturing'
    | 'retail_ecommerce'
    | 'financial_services'
    | 'logistics_transportation'
    | 'education_training'
    | 'healthcare'
    | 'construction_realestate'
    | 'hospitality_tourism'
    | 'government'
    | 'other';
  companySize: '0_10' | '5_25' | '25_50' | '50_100' | '100_500' | '500_1000' | '1000_plus';
  primaryContactName: string;
  /**
   * Business email address only (no free email domains)
   */
  primaryContactEmail: string;
  /**
   * Phone number (9-15 digits, optional + at start)
   */
  primaryContactPhone: string;
  status: 'active' | 'inactive' | 'suspended' | 'pending';
  /**
   * Additional company information
   */
  additionalInfo: {
    /**
     * Company website URL
     */
    website?: string | null;
    /**
     * VAT registration number
     */
    taxNumber?: string | null;
    /**
     * CR Number - unique identifier
     */
    commercialRegistration: string;
    address?: {
      /**
       * Street address (max 300 characters)
       */
      street?: string | null;
      /**
       * City name
       */
      city?: string | null;
      postalCode?: string | null;
      country?: string | null;
    };
  };
  notes?: string | null;
  createdBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  lastModifiedBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  updatedAt: string;
  createdAt: string;
  deletedAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  createdBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  lastModifiedBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "employees".
 */
export interface Employee {
  id: string;
  /**
   * Employee profile picture
   */
  avatar?: (string | null) | Media;
  /**
   * Company this employee is assigned to
   */
  company: string | Company;
  /**
   * Employee full name (max 200 characters)
   */
  fullName: string;
  /**
   * Unique employee ID within the company
   */
  employeeId: string;
  /**
   * National ID or Iqama number (10-15 digits)
   */
  nationalId: string;
  /**
   * Employee job title or position
   */
  jobTitle: string;
  /**
   * Employment contract information
   */
  contractInfo: {
    /**
     * Contract start date (not more than 30 days in future)
     */
    startDate: string;
    /**
     * Contract end date (optional, must be after start date)
     */
    endDate?: string | null;
    /**
     * Automatically renew contract when it expires
     */
    autoRenew?: boolean | null;
  };
  /**
   * Salary and payroll information
   */
  payrollInfo: {
    /**
     * Basic monthly salary in SAR
     */
    basicSalary: number;
    /**
     * Monthly allowances in SAR
     */
    allowances?: number | null;
    /**
     * Monthly deductions in SAR
     */
    deductions?: number | null;
    /**
     * Gross Pay = Basic Salary + Allowances (auto-calculated)
     */
    grossPay?: number | null;
    /**
     * Net Salary = Gross Pay - Deductions (auto-calculated)
     */
    netSalary?: number | null;
    /**
     * Saudi IBAN (24 characters starting with SA)
     */
    iban: string;
  };
  /**
   * Employee contact information
   */
  contactInfo?: {
    /**
     * Employee email address
     */
    email?: string | null;
    /**
     * Employee phone number
     */
    phone?: string | null;
  };
  /**
   * Employee status
   */
  status: 'active' | 'inactive' | 'terminated';
  /**
   * Internal notes for administrative use
   */
  notes?: string | null;
  createdBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  lastModifiedBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "candidates".
 */
export interface Candidate {
  id: string;
  avatar?: (string | null) | Media;
  name: string;
  /**
   * Desired or current job title
   */
  jobTitle: string;
  /**
   * Employment type preferences
   */
  employmentPreferences?: {
    fullTime?: boolean | null;
    partTime?: boolean | null;
    both?: boolean | null;
  };
  /**
   * Basic salary expectation (SAR)
   */
  basicSalary: number;
  /**
   * Work experience history
   */
  experiences?:
    | {
        title: string;
        company: string;
        employmentType: 'full_time' | 'part_time' | 'contract' | 'freelance' | 'internship';
        startDate: string;
        currentlyWorking?: boolean | null;
        endDate?: string | null;
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Technical skills and technologies
   */
  skills?:
    | (
        | 'javascript'
        | 'typescript'
        | 'python'
        | 'java'
        | 'c_'
        | 'c__'
        | 'go'
        | 'rust'
        | 'ruby'
        | 'php'
        | 'react'
        | 'angular'
        | 'vue_js'
        | 'next_js'
        | 'node_js'
        | 'express_js'
        | 'django'
        | 'flask'
        | 'spring_boot'
        | '_net'
        | 'laravel'
        | 'rails'
        | 'fastapi'
        | 'android'
        | 'ios'
        | 'react_native'
        | 'flutter'
        | 'swift'
        | 'kotlin'
        | 'aws'
        | 'azure'
        | 'google_cloud'
        | 'docker'
        | 'kubernetes'
        | 'jenkins'
        | 'ci/cd'
        | 'mongodb'
        | 'postgresql'
        | 'mysql'
        | 'redis'
        | 'elasticsearch'
        | 'oracle'
        | 'git'
        | 'rest_api'
        | 'graphql'
        | 'microservices'
        | 'devops'
        | 'agile'
        | 'scrum'
        | 'html'
        | 'css'
        | 'sass'
        | 'tailwind_css'
        | 'bootstrap'
        | 'machine_learning'
        | 'ai'
        | 'data_science'
        | 'tensorflow'
        | 'pytorch'
        | 'blockchain'
        | 'web3'
        | 'solidity'
        | 'smart_contracts'
      )[]
    | null;
  /**
   * Language proficiencies
   */
  languages?:
    | {
        language:
          | 'arabic'
          | 'english'
          | 'french'
          | 'spanish'
          | 'german'
          | 'hindi'
          | 'urdu'
          | 'bengali'
          | 'chinese'
          | 'other';
        fluencyLevel: 'native' | 'fluent' | 'advanced' | 'intermediate' | 'basic';
        id?: string | null;
      }[]
    | null;
  nationality:
    | 'saudi'
    | 'emirati'
    | 'kuwaiti'
    | 'qatari'
    | 'bahraini'
    | 'omani'
    | 'egyptian'
    | 'jordanian'
    | 'lebanese'
    | 'syrian'
    | 'iraqi'
    | 'yemeni'
    | 'indian'
    | 'pakistani'
    | 'bangladeshi'
    | 'filipino'
    | 'indonesian'
    | 'malaysian'
    | 'american'
    | 'british'
    | 'canadian'
    | 'australian'
    | 'german'
    | 'french'
    | 'italian'
    | 'spanish'
    | 'dutch'
    | 'other';
  country:
    | 'saudi_arabia'
    | 'united_arab_emirates'
    | 'kuwait'
    | 'qatar'
    | 'bahrain'
    | 'oman'
    | 'egypt'
    | 'jordan'
    | 'lebanon'
    | 'syria'
    | 'iraq'
    | 'yemen'
    | 'india'
    | 'pakistan'
    | 'bangladesh'
    | 'philippines'
    | 'indonesia'
    | 'malaysia'
    | 'united_states'
    | 'united_kingdom'
    | 'canada'
    | 'australia'
    | 'germany'
    | 'france'
    | 'italy'
    | 'spain'
    | 'netherlands'
    | 'other';
  /**
   * Candidate status in recruitment process
   */
  status: 'available' | 'assigned' | 'selected' | 'rejected';
  /**
   * Company candidate is assigned to
   */
  company?: (string | null) | Company;
  notes?: string | null;
  createdBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  lastModifiedBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  updatedAt: string;
  createdAt: string;
  deletedAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payroll-requests".
 */
export interface PayrollRequest {
  id: string;
  /**
   * Company requesting payroll processing
   */
  company: string | Company;
  /**
   * Payroll period month/year
   */
  payrollPeriod: string;
  /**
   * Additional deductions for specific employees this month (maximum 50 employees for optimal performance)
   */
  employeeDeductions?:
    | {
        /**
         * Select employee for deductions
         */
        employee: string | Employee;
        deductions: {
          type: 'gosi_percentage' | 'fixed_amount';
          /**
           * Percentage of basic salary (0-99%)
           */
          gosiPercentage?: number | null;
          /**
           * Fixed deduction amount (cannot exceed basic salary)
           */
          fixedAmount?: number | null;
          /**
           * Reason for deduction (max 10 characters)
           */
          reason?: string | null;
          /**
           * Auto-calculated deduction amount
           */
          calculatedAmount?: number | null;
          id?: string | null;
        }[];
        id?: string | null;
      }[]
    | null;
  /**
   * Payroll totals and summary
   */
  payrollSummary?: {
    /**
     * Total basic salary for all employees
     */
    totalBasicSalary?: number | null;
    /**
     * Total allowances for all employees
     */
    totalAllowances?: number | null;
    /**
     * Total deductions for all employees
     */
    totalDeductions?: number | null;
    /**
     * Total gross pay for all employees
     */
    totalGrossPay?: number | null;
    /**
     * Total net pay for all employees
     */
    totalNetPay?: number | null;
  };
  /**
   * Current status of the payroll request
   */
  status: 'new' | 'under_review' | 'approved' | 'rejected' | 'invoice_generated' | 'processed';
  /**
   * Reason for rejecting this payroll request
   */
  rejectionReason?: string | null;
  /**
   * User who submitted this payroll request
   */
  submittedBy?: (string | null) | User;
  /**
   * Admin who reviewed this payroll request
   */
  reviewedBy?: (string | null) | User;
  /**
   * Date when payroll request was reviewed
   */
  reviewedAt?: string | null;
  /**
   * Generated invoice number
   */
  invoiceNumber?: string | null;
  /**
   * Total amount for this payroll request (same as total net pay)
   */
  totalAmount?: number | null;
  /**
   * Number of employees in this payroll (auto-calculated)
   */
  employeesCount?: number | null;
  /**
   * Internal notes about this payroll request
   */
  notes?: string | null;
  createdBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  lastModifiedBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Individual employee payslips
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payslips".
 */
export interface Payslip {
  id: string;
  title?: string | null;
  /**
   * Parent payroll request
   */
  payrollRequest: string | PayrollRequest;
  /**
   * Employee for this payslip
   */
  employee: string | Employee;
  /**
   * Company that owns this payslip
   */
  company: string | Company;
  /**
   * Payroll period for this payslip
   */
  payrollPeriod: string;
  /**
   * Detailed payroll breakdown
   */
  payrollDetails: {
    /**
     * Basic salary amount
     */
    basicSalary: number;
    /**
     * Total allowances
     */
    allowances?: number | null;
    /**
     * Base deductions from employee profile
     */
    baseDeductions?: number | null;
    /**
     * Month-specific additional deductions
     */
    additionalDeductions?:
      | {
          type?: string | null;
          description?: string | null;
          amount?: number | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Total of all deductions (base + additional)
     */
    totalDeductions?: number | null;
    /**
     * Gross pay (Basic + Allowances)
     */
    grossPay?: number | null;
    /**
     * Net pay (Gross - Total Deductions)
     */
    netPay: number;
    /**
     * Employee IBAN for payment
     */
    iban?: string | null;
  };
  /**
   * Current status of the payslip
   */
  status: 'generated' | 'sent' | 'downloaded' | 'viewed';
  /**
   * Date when payslip was sent to employee
   */
  sentAt?: string | null;
  /**
   * Date when employee viewed/downloaded payslip
   */
  viewedAt?: string | null;
  /**
   * Whether PDF has been generated
   */
  pdfGenerated?: boolean | null;
  /**
   * URL/path to generated PDF
   */
  pdfUrl?: string | null;
  /**
   * Internal notes about this payslip
   */
  notes?: string | null;
  createdBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  lastModifiedBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * System audit trail for compliance and security
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "audit-log".
 */
export interface AuditLog {
  id: string;
  /**
   * Action that was performed
   */
  action: string;
  /**
   * User who performed the action
   */
  user: string | User;
  /**
   * Type of resource that was affected
   */
  resourceType: 'payroll-requests' | 'payslips' | 'employees' | 'companies' | 'users' | 'tickets' | 'notifications';
  /**
   * ID of the resource that was affected
   */
  resourceId: string;
  /**
   * Additional details about the action
   */
  details?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * IP address of the user
   */
  ipAddress?: string | null;
  /**
   * User agent string
   */
  userAgent?: string | null;
  /**
   * Severity level of the action
   */
  severity: 'info' | 'warning' | 'critical';
  /**
   * Category of the action
   */
  category: 'auth' | 'payroll' | 'employee' | 'company' | 'system' | 'export' | 'financial';
  createdBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  lastModifiedBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tickets".
 */
export interface Ticket {
  id: string;
  /**
   * Auto-generated unique identifier for the ticket
   */
  ticketId: string;
  /**
   * The company that created this ticket
   */
  company: string | Company;
  /**
   * Ticket title (max 150 characters)
   */
  subject: string;
  /**
   * Type of ticket or issue
   */
  type: 'technical' | 'payroll' | 'contract' | 'other';
  /**
   * Priority level of the ticket
   */
  priority: 'low' | 'medium' | 'high';
  /**
   * Current status of the ticket
   */
  status: 'new' | 'in_progress' | 'resolved' | 'closed';
  /**
   * Detailed description of the issue (max 1000 characters)
   */
  description: string;
  /**
   * Maximum 3 files, up to 10MB each
   */
  attachments?:
    | {
        /**
         * Allowed files: PDF, Word, Excel, JPEG, PNG
         */
        file: string | Media;
        id?: string | null;
      }[]
    | null;
  /**
   * All messages associated with this ticket
   */
  messages?: {
    docs?: (string | TicketMessage)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  createdBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  lastModifiedBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ticket-messages".
 */
export interface TicketMessage {
  id: string;
  /**
   * The ticket associated with this message
   */
  ticket: string | Ticket;
  /**
   * The user who sent this message
   */
  sender: string | User;
  /**
   * Message content (max 1000 characters)
   */
  message: string;
  /**
   * Internal notes are only visible to admins
   */
  messageType: 'reply' | 'internal_note';
  /**
   * Maximum 3 files, up to 10MB each
   */
  attachments?:
    | {
        /**
         * Allowed files: PDF, Word, Excel, JPEG, PNG
         */
        file: string | Media;
        id?: string | null;
      }[]
    | null;
  /**
   * Whether this message has been read
   */
  isRead?: boolean | null;
  createdBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  lastModifiedBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notifications".
 */
export interface Notification {
  id: string;
  /**
   * Short, clear notification title (max 120 characters)
   */
  title: string;
  /**
   * Detailed message content (max 2000 characters)
   */
  message: string;
  /**
   * Who should receive this notification
   */
  recipientType: 'all' | 'specific';
  /**
   * Select specific companies to notify
   */
  recipients?: (string | Company)[] | null;
  /**
   * Notification status
   */
  status: 'draft' | 'sent' | 'failed';
  /**
   * Date and time when the notification was sent
   */
  sentAt?: string | null;
  createdBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  lastModifiedBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notification-recipients".
 */
export interface NotificationRecipient {
  id: string;
  /**
   * The notification that was sent
   */
  notification: string | Notification;
  /**
   * Company that received the notification
   */
  company: string | Company;
  /**
   * Specific user who read the notification (optional)
   */
  user?: (string | null) | User;
  /**
   * Whether this notification has been read
   */
  isRead?: boolean | null;
  /**
   * When the notification was delivered
   */
  deliveredAt: string;
  /**
   * When the notification was read
   */
  readAt?: string | null;
  /**
   * Status of notification delivery
   */
  deliveryStatus: 'delivered' | 'failed' | 'pending';
  /**
   * List of users from this company who have read the notification
   */
  readBy?:
    | {
        user: string | User;
        readAt: string;
        id?: string | null;
      }[]
    | null;
  createdBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  lastModifiedBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contact-us".
 */
export interface ContactUs {
  id: string;
  /**
   * Name of the company (max 100 characters)
   */
  companyName: string;
  /**
   * Full name of the contact person (max 50 characters)
   */
  contactPersonName: string;
  /**
   * Valid email address for contact
   */
  email: string;
  /**
   * Job title or position (max 100 characters)
   */
  jobTitle: string;
  companySize: '1-10' | '11-50' | '51-200' | '201-500' | '501-1000' | '1000+';
  contactMethod: 'email' | 'phone' | 'video';
  /**
   * Additional message or information (max 1000 characters)
   */
  message?: string | null;
  /**
   * Current status of this contact inquiry
   */
  status: 'open' | 'closed';
  /**
   * Internal notes about this contact inquiry
   */
  notes?:
    | {
        note: string;
        addedBy: string | User;
        addedAt: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Date when inquiry was closed
   */
  closedAt?: string | null;
  /**
   * Admin who closed this inquiry
   */
  closedBy?: (string | null) | User;
  createdBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  lastModifiedBy?: {
    relationTo: 'users';
    value: string | User;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exports".
 */
export interface Export {
  id: string;
  name?: string | null;
  format?: ('csv' | 'json') | null;
  limit?: number | null;
  page?: number | null;
  sort?: string | null;
  sortOrder?: ('asc' | 'desc') | null;
  locale?: ('all' | 'en' | 'ar') | null;
  drafts?: ('yes' | 'no') | null;
  selectionToUse?: ('currentSelection' | 'currentFilters' | 'all') | null;
  fields?: string[] | null;
  collectionSlug: string;
  where?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: string;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'createCollectionExport';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'createCollectionExport') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'companies';
        value: string | Company;
      } | null)
    | ({
        relationTo: 'employees';
        value: string | Employee;
      } | null)
    | ({
        relationTo: 'candidates';
        value: string | Candidate;
      } | null)
    | ({
        relationTo: 'payroll-requests';
        value: string | PayrollRequest;
      } | null)
    | ({
        relationTo: 'payslips';
        value: string | Payslip;
      } | null)
    | ({
        relationTo: 'audit-log';
        value: string | AuditLog;
      } | null)
    | ({
        relationTo: 'tickets';
        value: string | Ticket;
      } | null)
    | ({
        relationTo: 'ticket-messages';
        value: string | TicketMessage;
      } | null)
    | ({
        relationTo: 'notifications';
        value: string | Notification;
      } | null)
    | ({
        relationTo: 'notification-recipients';
        value: string | NotificationRecipient;
      } | null)
    | ({
        relationTo: 'contact-us';
        value: string | ContactUs;
      } | null)
    | ({
        relationTo: 'exports';
        value: string | Export;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: string | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  role?: T;
  company?: T;
  firstName?: T;
  lastName?: T;
  createdBy?: T;
  lastModifiedBy?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  createdBy?: T;
  lastModifiedBy?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "companies_select".
 */
export interface CompaniesSelect<T extends boolean = true> {
  companyLegalName?: T;
  region?: T;
  industry?: T;
  companySize?: T;
  primaryContactName?: T;
  primaryContactEmail?: T;
  primaryContactPhone?: T;
  status?: T;
  additionalInfo?:
    | T
    | {
        website?: T;
        taxNumber?: T;
        commercialRegistration?: T;
        address?:
          | T
          | {
              street?: T;
              city?: T;
              postalCode?: T;
              country?: T;
            };
      };
  notes?: T;
  createdBy?: T;
  lastModifiedBy?: T;
  updatedAt?: T;
  createdAt?: T;
  deletedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "employees_select".
 */
export interface EmployeesSelect<T extends boolean = true> {
  avatar?: T;
  company?: T;
  fullName?: T;
  employeeId?: T;
  nationalId?: T;
  jobTitle?: T;
  contractInfo?:
    | T
    | {
        startDate?: T;
        endDate?: T;
        autoRenew?: T;
      };
  payrollInfo?:
    | T
    | {
        basicSalary?: T;
        allowances?: T;
        deductions?: T;
        grossPay?: T;
        netSalary?: T;
        iban?: T;
      };
  contactInfo?:
    | T
    | {
        email?: T;
        phone?: T;
      };
  status?: T;
  notes?: T;
  createdBy?: T;
  lastModifiedBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "candidates_select".
 */
export interface CandidatesSelect<T extends boolean = true> {
  avatar?: T;
  name?: T;
  jobTitle?: T;
  employmentPreferences?:
    | T
    | {
        fullTime?: T;
        partTime?: T;
        both?: T;
      };
  basicSalary?: T;
  experiences?:
    | T
    | {
        title?: T;
        company?: T;
        employmentType?: T;
        startDate?: T;
        currentlyWorking?: T;
        endDate?: T;
        description?: T;
        id?: T;
      };
  skills?: T;
  languages?:
    | T
    | {
        language?: T;
        fluencyLevel?: T;
        id?: T;
      };
  nationality?: T;
  country?: T;
  status?: T;
  company?: T;
  notes?: T;
  createdBy?: T;
  lastModifiedBy?: T;
  updatedAt?: T;
  createdAt?: T;
  deletedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payroll-requests_select".
 */
export interface PayrollRequestsSelect<T extends boolean = true> {
  company?: T;
  payrollPeriod?: T;
  employeeDeductions?:
    | T
    | {
        employee?: T;
        deductions?:
          | T
          | {
              type?: T;
              gosiPercentage?: T;
              fixedAmount?: T;
              reason?: T;
              calculatedAmount?: T;
              id?: T;
            };
        id?: T;
      };
  payrollSummary?:
    | T
    | {
        totalBasicSalary?: T;
        totalAllowances?: T;
        totalDeductions?: T;
        totalGrossPay?: T;
        totalNetPay?: T;
      };
  status?: T;
  rejectionReason?: T;
  submittedBy?: T;
  reviewedBy?: T;
  reviewedAt?: T;
  invoiceNumber?: T;
  totalAmount?: T;
  employeesCount?: T;
  notes?: T;
  createdBy?: T;
  lastModifiedBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payslips_select".
 */
export interface PayslipsSelect<T extends boolean = true> {
  title?: T;
  payrollRequest?: T;
  employee?: T;
  company?: T;
  payrollPeriod?: T;
  payrollDetails?:
    | T
    | {
        basicSalary?: T;
        allowances?: T;
        baseDeductions?: T;
        additionalDeductions?:
          | T
          | {
              type?: T;
              description?: T;
              amount?: T;
              id?: T;
            };
        totalDeductions?: T;
        grossPay?: T;
        netPay?: T;
        iban?: T;
      };
  status?: T;
  sentAt?: T;
  viewedAt?: T;
  pdfGenerated?: T;
  pdfUrl?: T;
  notes?: T;
  createdBy?: T;
  lastModifiedBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "audit-log_select".
 */
export interface AuditLogSelect<T extends boolean = true> {
  action?: T;
  user?: T;
  resourceType?: T;
  resourceId?: T;
  details?: T;
  ipAddress?: T;
  userAgent?: T;
  severity?: T;
  category?: T;
  createdBy?: T;
  lastModifiedBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tickets_select".
 */
export interface TicketsSelect<T extends boolean = true> {
  ticketId?: T;
  company?: T;
  subject?: T;
  type?: T;
  priority?: T;
  status?: T;
  description?: T;
  attachments?:
    | T
    | {
        file?: T;
        id?: T;
      };
  messages?: T;
  createdBy?: T;
  lastModifiedBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ticket-messages_select".
 */
export interface TicketMessagesSelect<T extends boolean = true> {
  ticket?: T;
  sender?: T;
  message?: T;
  messageType?: T;
  attachments?:
    | T
    | {
        file?: T;
        id?: T;
      };
  isRead?: T;
  createdBy?: T;
  lastModifiedBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notifications_select".
 */
export interface NotificationsSelect<T extends boolean = true> {
  title?: T;
  message?: T;
  recipientType?: T;
  recipients?: T;
  status?: T;
  sentAt?: T;
  createdBy?: T;
  lastModifiedBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notification-recipients_select".
 */
export interface NotificationRecipientsSelect<T extends boolean = true> {
  notification?: T;
  company?: T;
  user?: T;
  isRead?: T;
  deliveredAt?: T;
  readAt?: T;
  deliveryStatus?: T;
  readBy?:
    | T
    | {
        user?: T;
        readAt?: T;
        id?: T;
      };
  createdBy?: T;
  lastModifiedBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contact-us_select".
 */
export interface ContactUsSelect<T extends boolean = true> {
  companyName?: T;
  contactPersonName?: T;
  email?: T;
  jobTitle?: T;
  companySize?: T;
  contactMethod?: T;
  message?: T;
  status?: T;
  notes?:
    | T
    | {
        note?: T;
        addedBy?: T;
        addedAt?: T;
        id?: T;
      };
  closedAt?: T;
  closedBy?: T;
  createdBy?: T;
  lastModifiedBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exports_select".
 */
export interface ExportsSelect<T extends boolean = true> {
  name?: T;
  format?: T;
  limit?: T;
  page?: T;
  sort?: T;
  sortOrder?: T;
  locale?: T;
  drafts?: T;
  selectionToUse?: T;
  fields?: T;
  collectionSlug?: T;
  where?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskCreateCollectionExport".
 */
export interface TaskCreateCollectionExport {
  input: {
    name?: string | null;
    format?: ('csv' | 'json') | null;
    limit?: number | null;
    page?: number | null;
    sort?: string | null;
    sortOrder?: ('asc' | 'desc') | null;
    locale?: ('all' | 'en' | 'ar') | null;
    drafts?: ('yes' | 'no') | null;
    selectionToUse?: ('currentSelection' | 'currentFilters' | 'all') | null;
    fields?: string[] | null;
    collectionSlug: string;
    where?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    user?: string | null;
    userCollection?: string | null;
    exportsCollection?: string | null;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}